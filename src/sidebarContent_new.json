{
  "Section_Introduction": {
    "title": "Introduction to Ethereum Proof of Stake Demo",
    "content": [
      "Hello!",
      "This project is an interactive demonstration of key principles behind Ethereum 2.0 Proof of Stake mechanism.",
      "It is based on the Ethereum Mauve Paper by Vitalik Buterin and includes almost all its sections, ideas and formulas.",
      "**How to use?**",
      "- The project is designed to be viewed in an ordered way, section by section. Press “Next” and “Go to next section” buttons in the bottom right corner when you’ve finished the step.\n- The text in the sidebar contains my notes that I hope help understand what’s going on at every stage. Make sure to read through it any time you didn’t get something from the visualisations.",
      "**Before you press start, please note:**",
      "1. This is an educational website. It is not decentralised, or scalable, or realistic. It’s goal is to explain how Ethereum works to almost anyone interested.\n2. This website is frontend-only. All data is generated and calculated right in your browser.\n3. It should be adaptive, but because it features lots of JS and is built in horizontal format, I recommend viewing it on your computer.\n4. This website is a first pet project of mine. So it might break occasionally (though I tested it), or feature some bugs, or be displayed not in the best way on your screen resolution. Sorry!",
      "If you’d like to learn more about the project, follow the links below:",
      "- [Medium blog post about how and why this was made](#)\n- [A GitHub repo](#)\n- if you want to suggest an edit, donate or ask me anything: tim.sha256@gmail.com"
    ]
  },
  "Section_StakingOverview": {
    "steps": {
      "Step_Overview": {
        "title": "Introduction to Staking",
        "content": [
          "The topic of this project is the **Proof of Stake (PoS)** - a consensus mechanism in Ethereum 2.0.", 
          "A consensus mechanism is a way to ensure trust and decisionmaking in a decentralised network like Ethereum - where there’s no authority, regulator or governor.",
          "Staking in Ethereum 2.0 is the process of actively participating in transaction validation (similar to mining) on the Ethereum blockchain.",
          {
            "type": "list",
            "items": [
              "Validators are nodes in the blockchain chosen to create new blocks and validate transactions.",
              "Validators earn rewards for helping to secure the network - this is Staking.",
              "In this demo, I’ve pre-generated 15 validators to show how the network might look. The pie chart and table show the distribution of stakes among these validators. Please note that in the real ETH blockchain there are dozens of thousands validators, not 15."
            ]
          },
          "**Each validator has a list of features:**",
          {
            "type": "list",
            "items": [
              "Stake amount (in ETH)",
              "Validation code - a mix of public keys and other parameters, used to verify the validator.",
              "Randao commitment - a pseudo-random value. More about it in the next step",
              "Withdrawal address - validator’s wallet address"
            ]
          }
        ]
      },
      "Step_StakingInput": {
        "title": "Staking Input",
        "content": [
          "To become a validator, you need to complete these steps:",
          {
            "type": "orderedList",
            "items": [
              "Stake at least 32 ETH (for best visualisation, set it to 100-500)",
              "Get a withdrawal address (we’ll generate a random one)",
              "Create a RANDAO commitment",
              "Generate a validation code"
            ]
          },
          "The RANDAO commitment is a pseudo-random value based on a secret phrase of your choice.",
          "The chosen phrase is hashed repeatedly for a number of times equal to the amount of blocks you’d like to validate. We’ll explain its meaning in the next section.",
          "Each step in the animation represents one round of hashing, demonstrating how the final result is derived from your initial input.",
          {
            "type": "formula",
            "content": "R = H^n(\\text{secret phrase})"
          },
          "Where H is the hash function, and n is the number of blocks to validate."
        ]
      },
      "Step_Summary": {
        "title": "Summary",
        "content": [
          "**Congratulations!**",
          "You've successfully become a validator. Your contribution helps secure the Ethereum network and maintain its decentralized nature.",
          "You can now find yourself in the pie chart and table below it.",
          "The values you've generated (RANDAO commitment, validation code, etc.) were sent to the Casper Contract, one of the main contracts in Ethereum that keeps the list of validators, and are used in the validation process to ensure the integrity and security of the network. But more on that in the next section!"
        ]
      }
    }
  },

  "Section_ValidatorSelection": {
    "steps": {
      "Step_RandaoUnrolling": {
        "title": "RANDao Unrolling",
        "content": [
          "Remember how you'd created your own RANDAO value?",
          "The idea behind it is that hash function is a one-side function: you can't derive the original secret phrase or even a value from the previous hashing step from the final value.",
          "You can read more about hashing functions [here](https://www.geeksforgeeks.org/introduction-to-hashing-2/).",
          "But, if you have the value from the previous step, and hash it once again - it will be equal to the final value.",
          "RANDAO is a way for the Ethereum Casper Contract and other nodes to validate that **you are really you**: with each block you validate, you submit the value from the previous hashing step (Unrolled RANDAO), and by hashing it and comparing it to your RANDAO commitment, others can check if you're legit without knowing your secret phrase.",
          "Now you know why you needed to set the number of steps in the previous section - this process is not endless, and when you unroll your Randao for the last time, you can't validate new blocks anymore - there's only the secret phrase left.",
          "That's why validators in the real network hash the secret phrase for thousands of times in order to validate more blocks with time.",
          "Let's unroll your RANDAO by re-calculating it from scratch:",
          {
            "type": "orderedList",
            "items": [
              "Starting with a secret phrase you provided",
              "Repeatedly hashing this phrase $N-1$ times, where $N$ is the number of steps you chose previously."
            ]
          },
          "With each next block, we'll be doing one step less: $N-2$, $N-3$, …"
        ]
      },
      "Step_XorCalculation": {
        "title": "Global XOR Calculation",
        "content": [
          "This is a very important step that shows another purpose of the RANDAO commitment.",
          "The thing is, you can't ensure real randomness inside of the blockchain, because it's state is fully deterministic: the code in the smart contracts, which the Ethereum is built with, can't google or secretly generate some value without others knowing the source of randomness.",
          "You can read more about randomness in blockchains [here](https://chain.link/education-hub/randomness-web3).",
          "The only way to use real randomness in the blockchain is by using an oracle, or a network of oracles.",
          "But let's not dive in it, since Ethereum relies on another kind of randomness - the **pseudo-randomness**.",
          "The idea behind using pseudo-random values to make \"random\" decisions in Ethereum is quite logical:",
          {
            "type": "list",
            "items": [
              "Every time they are selected to validate a block, validators can provide a new pseudorandom Unrolled RANDAO, which is unpredictable to others since they don't know the secret phrase. This is the first source of (pseudo) randomness.",
              "The casper contract holds a Global Randao value in it, initially set to 0. The Global Randao is known to everyone and changes with every block created. This is an another source of pseudo-randomness. It is calculated by combining the previous Global Randao with validator's Unrolled Randao, using a XOR function: [read more about XOR here](https://en.wikipedia.org/wiki/XOR_gate)."
            ]
          },
          "XOR is very simple:",
              "- Two values in binary form are compared bit-by-bit",
              "- If the bits are same (1 and 1 or 0 and 0), the resulting bit is 0, otherwise it's 1.",
              "XORing is also a one-side operation - you can't derive the two original values from it.",
          "This method of combining randomness sources helps prevent any single validator from manipulating the selection process, as they cannot predict or control the global RANDAO value.",
          "Note:",
          {
            "type": "list",
            "items": [
              "For illustration purposes, we're showing the XOR process with shortened hashes. In practice, the full 256-bit (64 hexadecimal characters) hashes are used.",
              "The color coding in the binary representation shows where the bits match (green) or differ (red). The XOR result has a '1' wherever the inputs differ, and '0' where they match."
            ]
          }
        ]
      },
      "Step_ValidatorSelectionVisualization": {
        "title": "Validator Selection",
        "content": [
          "Finally, we can now select a validator of the next block, using the psedo-random value from the previous step.",
          "**How it works:**",
          {
            "type": "orderedList",
            "items": [
              "New Global Randao from the previous step is used to generate a pseudo-random number, valued between 0 and 1. This is done by simply dividing the Global Randao in decimal form by $2^{53} - 1$. The resulting value is abbreviated as $r$.", "This $2^{53} - 1$ value ensures that the resulting r is always a probabilistic measure between 0 and 1. If you are interested in the reason for choosing the specific value - read about it [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER). Spoiler: it's complex and not necessary to know in the Ethereum context.",
              "This new number $r$ is then multiplied by the TVL - the total amount of Ethereum staked by all validators.",
              "Each validator's stake is presented on the chart in a \"ladder\" format - the whole TVL is broken down into separate stakes. To choose the validator, we place the $r*TVL$ value on the chart, and then check which validator's stake it falls into."
            ]
          },
          "**Key points of this process:**",
          {
            "type": "list",
            "items": [
              "Validators are selected probabilistically based on their stake",
              "Higher stake increases the chance of selection, but doesn't guarantee it",
              "This method ensures fairness while also incentivising higher stakes",
              "The selection process maintains the security and decentralization of the Ethereum network by preventing any single entity from controlling the validation process."
            ]
          }
        ]
      }
    }
  },
  "Section_BlockCreation": {
    "steps": {
      "Step_BlockProposal": {
        "title": "Block Proposal",
        "content": [
          "Now when we've selected the validator, it's time for him to propose a block - an aggregation of transactions that took place after the previous block and are present in mempool, selected by the validator, coupled with values calculated from the previous block.",
          "This process ensures that new transactions are added to the blockchain in an orderly and secure manner. There are still nuances in the selection of transactions from the mempool - if you're interested in it, check out this [article about MEV](https://ethereum.org/en/developers/docs/mev/). But we won't touch this topic.",
          "For the purpose of demonstrating how the block is created, we'll generate some reasonable amount of transactions, and then calculate their root using a Merkle Tree.",
          "Merkle tree is an another simple yet powerful cryptographic operation which is used in many places in Ethereum (you'll also see it in the \"Light Client Syncing\" section later).",
          "Imagine you have a list of values, - in our case, transactions data, - that others want to validate in the most optimal way. Merkle Tree allows us to validate a single value (it's called \"Merkle Root\") to know if the list of transactions on our side is exactly the same as on validator's side.",
          "But most importantly, if there's a difference between your Merkle Root and the one provided, you can find transaction(s) that do not match with $O(log n)$ speed - that's extremely fast!",
          "It might sound like nonsense to you - don't worry, we'll get back to the way it works quite soon. If you want to understand it right now - here's a very good and short [youtube video](https://www.youtube.com/watch?v=n6nEPaE7HNk) that explains how merkle trees work in a detailed and intuitive way.",
          "Finally, after we have all necessary values, we can propose a block in it's full form. A block is actually just a JSON with:",
          {
            "type": "list",
            "items": [
              "All transactions in the block",
              "Block header (including the Transactions Root - notice that it's the result of Merkle Root calculation above)",
              "Reference to previous block and to submitting validator."
            ]
          },
          "We won't cover every single field that is present in the block, - believe me, it's not that interesting or important. If you still want to learn about it - read [this article](https://ethereum.org/en/developers/docs/blocks/) that explains all values, and take a look at some real block data on etherscan.io - [this one, for example](https://etherscan.io/block/21095658)."
        ]
      },
      "Step_BlockAttestation": {
        "title": "Block Attestation and Aggregation",
        "content": [
          "Before reading this, scroll down to see the voting animation - it's a visual representation of the process.",
          "**Block attestation** is the process where other validators confirm the validity of the proposed block. **Key points include:**",
          {
            "type": "list",
            "items": [
              "Validators check that the block proposal follows the protocol rules.",
              "They verify the transactions and state transitions in the block via calculating the Merkle Root themselves and comparing it to the one submitted.",
              "If valid, validators sign an attestation to the block.",
              "These attestations are collected and will be included in future blocks."
            ]
          },
          "**Block aggregation** involves collecting and combining attestations from multiple validators. This step is crucial for efficiency and scalability:",
          {
            "type": "list",
            "items": [
              "Attestations from different validators are gathered, and then compressed and aggregated into a single signature.",
              "This aggregation significantly reduces the amount of data that needs to be stored on the blockchain.",
              "It allows for a large number of validators to participate without overwhelming the network."
            ]
          }
        ]
      },
      "Step_IncorporationIntoChain": {
        "title": "Incorporation into Chain",
        "content": [
          "The final step is incorporating the new block into the blockchain:",
          {
            "type": "list",
            "items": [
              "Once a block has received sufficient attestations, it's considered confirmed.",
              "The block is added to the canonical chain, but is not finalised yet. More on this in the next section.",
              "The network state is updated to reflect the new block.",
              "Next validator is selected to start working on the next block, building on top of this newly added one."
            ]
          },
          "This process ensures the continuous growth and security of the Ethereum blockchain.",
          "**Congratulations!**",
          "We're almost half the way through, and this was the tougher part.", "Now you know how new blocks appear on the blockchain, and how the validator is selected to submit it.","Let's proceed and get into more nuances that appear in decentralised networks."
        ]
      }
    }
  },
  "Section_FinalityAndChainSelection": {
    "steps": {
      "Step_ForksAndDivergingChains": {
        "title": "Forks & Diverging Chains",
        "content": [
          "In blockchains, which are decentralised networks, **forks** can occur when two or more blocks are produced at the same height, creating diverging chains.",
          "Now, in a centralised system, there would be an authority responsible for deciding which block is right. However, in the decentralised system there needs to be a Consensus Mechanism for this task - in Ethereum, the Proof of Stake is the mechanism used.",
          "In this section, you'll learn how consensus is reached to decide which block is the legit one.",
          "**Key points about forks:**",
          {
            "type": "list",
            "items": [
              "Forks can happen due to network latency or malicious actors",
              "They create temporary uncertainty about the true state of the blockchain",
              "Ethereum's consensus mechanism is designed to resolve these forks quickly"
            ]
          },
          "The visualizations in this and next steps show how chains can diverge and how the network eventually agrees on a single canonical chain."
        ]
      },
      "Step_ValidatorBettingOverview": {
        "title": "Validator Betting Overview",
        "content": [
          "In Ethereum's Proof of Stake, validators 'bet' on which chain they believe will become the canonical (trusted) chain.",
          "The chain that wins is the one with more value bet on it - this way we make sure that any attempt of manipulation is extremely costly and economically senseless.",
          "**This betting process:**",
          {
            "type": "list",
            "items": [
              "Incentivizes validators to agree on the correct chain",
              "Helps quickly resolve forks",
              "Penalizes validators who bet on the wrong chain"
            ]
          },
          "There are a bunch of formulas on this step - sorry it's not that good-looking as others, I didn't know how to put it otherwise.",
          "What you need to understand is that you only control the **odds** - your willingness to risk while betting on one of the chains. The more you're assured in the single chain being correct, the more you will gain if it gets finalised.",
          "Values written in caps - like FINALITY_REWARD_COEFFICIENT, - are constants, pre-defined in the mauve paper. Most of them were multiplied by 1000-100000 to enhance the numbers and make the difference visible in a tiny 16 validator network. But the principles and formulas are left unchanged.",
          "$V_{GAIN}$ and $V_{LOSS}$ are the calculated values that depend on constants and user input. You'll also notice that $V_{GAIN}$ is always less than $V_{LOSS}$ - it shows the overall way Ethereum network treats malicious actors and jokers - penalties for misbehaviour are always bigger than rewards for acting good.",
          "It stimulates all nodes to act good, or be ready to pay an inadequate price for any possible attack.",
          "Validators follow a fork choice rule, specifically the \"LMD GHOST\" (Latest Message Driven Greediest Heaviest Observed Subtree). This rule helps each validator choose the head of the chain by observing the heaviest subtree, which represents the chain with the most accumulated support.",
          "For now, let's say you're voting for the proposed chain"
        ]
      },
      "Step_OtherValidatorsParticipate": {
        "title": "Other Validators Participate",
        "content": [
          "At this step, all validators decide between 2 options:",
          {
            "type": "list",
            "items": [
              "Abstain from the finality betting - this way they don't rick losing money, but also are guaranteed not to gain anything",
              "Take part in the betting by submitting their odds and selecting the chain they believe will win"
            ]
          },
          "This process is visualised via cards that appear one-by-one on the screen, and the changes in both Chains Stake, pictured in the bar chart.", "In reality, the betting happens in a decentralised (not ordered) way, but it was much harder to visualise.",
          "One more thing that was incredibly hard to visualise is the DECAY coefficient as a part of $V_{GAIN}$ and $V_{LOSS}$ calculation.","With time, the $V_{GAIN}$ and $V_{LOSS}$ should decrease. This stimulates nodes to bet faster.",
          "When all the validators made their decision, go to the next step - let's see the result of the betting.",
          "As the result of the betting, you'll see which chain is leading, and how much each validator has bet on it."
        ]
      },
      "Step_ResultsRewardsAndPenalties": {
        "title": "Results, Rewards, and Penalties",
        "content": [
          "After the betting process, the network determines the canonical chain and distributes rewards and penalties.",
          "In order for the chain to be finalised, it must reach a **supermajority** quorum, - at least $2/3$, or $67\\%$ of total bets value.",
          "If supermajority is reached, the winning chain is considered finalised, and becomes the canonical one.",
          "**Key aspects of this step:**",
          {
            "type": "list",
            "items": [
              "Validators who bet on the correct chain receive rewards",
              "Those who bet on incorrect chains may face penalties",
              "The size of rewards and penalties depends on the $V_{GAIN}$ and $V_{LOSS}$ of each validator, calculated at the previous step"
            ]
          },
          "In the bar chart and the table you can see the changes in stakes - sorry that they are tiny and black, I tried making the chart more clear, but it turned out to be stronger than me. Hover over the individual bars to see the actual values for each validator.",
          "To sum up, the **finality system** is crucial for Ethereum Network and Proof of Stake in general.","There will always be forks and bad actors - and finality is the way to only bet and argue over the new blocks, and be assured that the rest of the chain can't be changed or questioned by anyone in the network."
        ]
      }
    }
  },
  "Section_EconomicsFeesAndPenalties": {
    "steps": {
      "Step_Introduction": {
        "title": "Introduction to Economics, Fees, and Penalties",
        "content": [
          "In this section, we'll explore the economic aspects of Ethereum's Proof of Stake system, including transaction fees, block rewards, and penalties for misbehaving validators.",
          "Understanding these economic incentives is crucial for grasping how Ethereum maintains its security and efficiency in a decentralized manner.",
          "We'll cover three main topics:",
          {
            "type": "list",
            "items": [
              "Transaction Fees: How users pay for network usage",
              "Block Rewards: Incentives for validators to secure the network",
              "Penalties and Slashing: Consequences for malicious or negligent behavior"
            ]
          },
          "Each of these components plays a vital role in Ethereum's economic model, ensuring the network remains secure, efficient, and decentralized."
        ]
      },
      "Step_TransactionFees": {
        "title": "Transaction Fees",
        "content": [
          "Transaction fees in Ethereum consist of two parts:",
          {
            "type": "list",
            "items": [
              "Base Fee: This is burned (removed from circulation), reducing ETH supply.",
              "Priority Fee (Tip): This goes to the validator as an incentive for faster processing."
            ]
          },
          "The fee structure helps maintain network security and manage congestion.",
          "Validators are incentivized to include transactions with higher tips, ensuring efficient processing of high-priority transactions."
        ]
      },
      "Step_BlockRewards": {
        "title": "Block Rewards",
        "content": [
          "Block rewards are the primary incentive for validators to participate in the Ethereum network.",
          "Key points about block rewards:",
          {
            "type": "list",
            "items": [
              "Rewards are given for proposing and attesting to blocks",
              "The reward amount is calculated based on the validator's effective balance and overall network participation",
              "Rewards help offset the costs of running validator hardware and encourage long-term network security"
            ]
          },
          "Understanding block rewards is crucial for potential validators to assess the economic viability of participating in the network."
        ]
      },
      "Step_PenaltiesAndSlashing": {
        "title": "Penalties and Slashing",
        "content": [
          "To maintain network security and incentivize proper behavior, Ethereum implements a system of penalties and slashing for validators.",
          "Key aspects of this system include:",
          {
            "type": "list",
            "items": [
              "Minor penalties for being offline or missing attestations",
              "Severe slashing penalties for provably malicious behavior, such as double signing",
              "Correlation penalties that increase slashing severity if multiple validators are slashed at once"
            ]
          },
          "This system of penalties and slashing is designed to make attacks on the network economically infeasible and to encourage validators to maintain high uptime and follow the protocol rules."
        ]
      }
    }
  },
  "Section_LightClientSyncing": {
    "title": " ",
    "content": []
  },
  "Section_ShardingAndCrossShard": {
    "steps": {
      "Step_ShardModelOverview": {
        "title": "Shard Model Overview",
        "content": [
          "Sharding divides the Ethereum network into smaller parts called shards.",
          "This allows for parallel processing of transactions, increasing overall network capacity.",
          {
            "type": "list",
            "items": [
              "Improves scalability",
              "Maintains decentralization",
              "Reduces network congestion"
            ]
          }
        ]
      },
      "Step_ValidatorAssignment": {
        "title": "Validator Assignment",
        "content": [
          "Validators are randomly assigned to different shards.",
          "Random assignment enhances network security by preventing targeted attacks.",
          {
            "type": "list",
            "items": [
              "Ensures fair distribution of validators",
              "Maintains shard integrity",
              "Prevents shard dominance"
            ]
          }
        ]
      },
      "Step_CrossShardCommunication": {
        "title": "Cross-Shard Communication",
        "content": [
          "Shards can communicate and share information using a log-based system.",
          "Shard 0 plays a special role in managing cross-shard finality.",
          {
            "type": "list",
            "items": [
              "Uses ETHLOG and GETLOG opcodes",
              "Enables complex multi-shard transactions",
              "Ensures network cohesion"
            ]
          }
        ]
      }
    }
  },
  "Section_Conclusion": {
    "title": "Conclusion and Reference List",
    "content": [
      "Congratulations on completing the Ethereum Proof of Stake MVP tutorial!",
      "You've now gained insights into the core components of Ethereum's PoS system, from staking to sharding.",
      "For further reading and references, please check the list below:",
      {
        "type": "list",
        "items": [
          "Ethereum 2.0 Specifications: https://github.com/ethereum/consensus-specs",
          "Ethereum Foundation Blog: https://blog.ethereum.org/",
          "Ethereum Improvement Proposals (EIPs): https://eips.ethereum.org/",
          "Vitalik Buterin's Website: https://vitalik.ca/",
          "Ethereum Research Forum: https://ethresear.ch/",
          "Ethereum Stack Exchange: https://ethereum.stackexchange.com/"
        ]
      },
      "We hope this tutorial has been informative and has helped you understand the intricacies of Ethereum's Proof of Stake system. As the Ethereum ecosystem continues to evolve, stay curious and keep learning!"
    ]
  }
}
